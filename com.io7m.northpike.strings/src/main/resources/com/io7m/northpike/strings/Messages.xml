<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
  <entry key="agent">Agent</entry>
  <entry key="agent_id">Agent ID</entry>
  <entry key="agent_label">Agent Label</entry>
  <entry key="analyze">Analyze</entry>
  <entry key="archive">Archive</entry>
  <entry key="barrier">Barrier</entry>
  <entry key="clone">Clone</entry>
  <entry key="downloading">Downloading {0}</entry>
  <entry key="entry">Entry</entry>
  <entry key="error_duplicate">Object already exists.</entry>
  <entry key="error_duplicate_deleted">A previously deleted object exists with this ID.</entry>
  <entry key="error_hash_mismatch">Hash value mismatch.</entry>
  <entry key="error_http">HTTP server error.</entry>
  <entry key="error_io">I/O error.</entry>
  <entry key="error_no_tool_execution">A task does not have a defined tool execution.</entry>
  <entry key="error_nonexistent">Object does not exist.</entry>
  <entry key="error_not_connected">Not connected.</entry>
  <entry key="error_parse">Parse error.</entry>
  <entry key="error_plan_cyclic">Adding this dependency would create a cycle in the plan.</entry>
  <entry key="error_protocol">Protocol error.</entry>
  <entry key="error_read_short">Read fewer octets than were required.</entry>
  <entry key="error_repository_wrong_provider">Incorrect repository provider.</entry>
  <entry key="error_resource_closing">One or more resources could not be closed.</entry>
  <entry key="error_server_failed_protocol_confirmation">Server refused protocol version confirmation.</entry>
  <entry key="error_size_limit_exceeded">Exceeded message size limit.</entry>
  <entry key="error_unsafe_archive_path">Unsafe archive path encountered; refusing to unpack.</entry>
  <entry key="expected">Expected</entry>
  <entry key="file">File</entry>
  <entry key="gc">GC</entry>
  <entry key="hash_algo">Hash Algorithm</entry>
  <entry key="hash_expected">Hash (Expected)</entry>
  <entry key="hash_received">Hash (Received)</entry>
  <entry key="http_message">HTTP Message</entry>
  <entry key="http_status">HTTP Status</entry>
  <entry key="installing">Installing {0}</entry>
  <entry key="limit">Limit</entry>
  <entry key="offset">Offset</entry>
  <entry key="pull">Pull</entry>
  <entry key="received">Received</entry>
  <entry key="repository">Repository</entry>
  <entry key="scm_provider">SCM Provider</entry>
  <entry key="source">Source</entry>
  <entry key="target">Target</entry>
  <entry key="task">Task</entry>
  <entry key="tool_reference">Tool Reference</entry>
  <entry key="uri">URI</entry>
  <entry key="user">User</entry>
  <entry key="user_id">User ID</entry>

  <entry key="type_check_undefined_variable">Undefined variable.</entry>
  <entry key="type_check_expression">An expression did not have the expected type.</entry>
  <entry key="type_check_statement">A statement did not have the expected type.</entry>
  <entry key="type_check_plan_variable">The given plan variable does not have the expected type.</entry>
  <entry key="type_check_condition">The statement's condition does not evaluate to a boolean type.</entry>
  <entry key="type_check_condition_branches">The branches of the if statement do not evaluate to the same type.</entry>

  <!--       -->
  <!-- Plans -->
  <!--       -->

  <entry key="plan_explain_empty">
    An empty plan will always succeed immediately.
  </entry>
  <entry key="plan_explain_task_becomes_ready_empty">
    Because it has no dependencies, task {0} will be scheduled for execution immediately.
  </entry>
  <entry key="plan_explain_task_becomes_ready_dependencies">
    Once dependencies [{0}] have completed, task {1} will be scheduled for execution.
  </entry>
  <entry key="plan_explain_barrier_becomes_ready_empty">
    Because it has no dependencies, barrier {0} will complete immediately.
  </entry>
  <entry key="plan_explain_barrier_becomes_ready_dependencies">
    Once dependencies [{0}] have completed, barrier {1} will complete.
  </entry>
  <entry key="plan_explain_task_requires_matching_agent">
    Task {0} will require a hypothetical agent "{1}" matching the expression "{2}".
  </entry>
  <entry key="plan_explain_task_requires_specific_agent">
    Task {0} will require the specific agent "{1}" that executed task "{2}" previously.
  </entry>
  <entry key="plan_explain_done">
    Evaluation of the plan ends.
  </entry>
  <entry key="plan_explain_task_agent_timeout">
    The task {0} will fail if it has to wait longer than {1} for the agent to become available.
  </entry>
  <entry key="plan_explain_task_execution_timeout">
    The task {0} will be considered to have failed if execution on the agent takes longer than {1}.
  </entry>

  <!--              -->
  <!-- Agent Labels -->
  <!--              -->

  <entry key="syntax_agent_label_match_anylabel_name">Syntax (any-label)</entry>
  <entry key="syntax_agent_label_match_anylabel">
    <![CDATA[any-label]]>
  </entry>

  <entry key="syntax_agent_label_match_specific_name">Syntax (specific-label)</entry>
  <entry key="syntax_agent_label_match_specific">
    <![CDATA[(with-label <label-name>)]]>
  </entry>

  <entry key="syntax_agent_label_match_and_name">Syntax (and-label)</entry>
  <entry key="syntax_agent_label_match_and">
    <![CDATA[(and <agent-label-match> <agent-label-match>)]]>
  </entry>

  <entry key="syntax_agent_label_match_or_name">Syntax (or-label)</entry>
  <entry key="syntax_agent_label_match_or">
    <![CDATA[(or <agent-label-match> <agent-label-match>)]]>
  </entry>

  <entry key="syntax_agent_label_match_name">Syntax (agent-label-match)</entry>
  <entry key="syntax_agent_label_match">
    <![CDATA[<any-label> | <specific-label> | <and-label> | <or-label>]]>
  </entry>
</properties>

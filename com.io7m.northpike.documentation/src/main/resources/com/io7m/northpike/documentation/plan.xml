<?xml version="1.0" encoding="UTF-8" ?>

<Section xmlns="urn:com.io7m.structural:8:0"
         id="352ba8b4-1d9d-443c-929a-21027c374207"
         title="Plan Language">

  <Subsection title="Overview">
    <Paragraph>
      The <Term type="term">plan</Term> language is a domain-specific language used to write
      <Link target="7b6d8296-cba1-448b-96e0-10e89b61bec0">plans</Link>.
    </Paragraph>
    <Paragraph>
      A <Term type="term">plan</Term> program consists of immutable
      <Link target="ee2248ae-b120-40ba-8ad7-96c82750d1b2">variables</Link>,
      <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">tasks</Link>, and
      <Link target="f6a513dc-e704-4e62-a562-b2530d9f5e67">barriers</Link>.
    </Paragraph>
  </Subsection>

  <Subsection title="Tasks"
              id="cbc2e395-4351-49fb-b90e-eb38d21e454c">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">task</Term> is an executable element that, when evaluated, causes a
        <Link target="c9234354-ea97-4693-826c-a3ccd9a006d7">tool execution</Link>
        to be executed on an appropriate <Link target="935b5ed1-1fbb-4d8b-9930-c5a3e79c7afd">agent</Link>.
      </Paragraph>
    </Subsection>
  </Subsection>

  <Subsection title="Barriers"
              id="f6a513dc-e704-4e62-a562-b2530d9f5e67">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">barrier</Term> is an executable element that...
      </Paragraph>
    </Subsection>
  </Subsection>

  <Subsection title="Agents"
              id="43fa1060-d9b5-4e79-b139-015e1d6591f3">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">agent</Term> is...
      </Paragraph>
    </Subsection>
  </Subsection>

  <Subsection title="Variables"
              id="ee2248ae-b120-40ba-8ad7-96c82750d1b2">
    <Paragraph>
      Variables...
    </Paragraph>
  </Subsection>

  <Subsection title="Tool References"
              id="4f5e9536-bac1-4fd9-8549-5c2404be1d3d">
    <Paragraph>
      Tool References...
    </Paragraph>
  </Subsection>

  <Subsection title="Semantics"
              id="fb2213d8-136e-4901-977b-ac7fcd5c929c">
    <Subsection title="States">
      <Paragraph>
        The <Term type="term">plan</Term> language is a concurrent, non-deterministic language specified as a series of
        state transitions.
      </Paragraph>
      <FormalItem title="States">
        <Image source="exec.png"
               width="640"
               height="482">States
        </Image>
      </FormalItem>
      <Paragraph>
        Each element in the plan has a defined initial state:
      </Paragraph>
      <FormalItem title="Initial States">
        <ListUnordered>
          <Item>
            If an element has a non-empty set of
            <Link target="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">dependencies</Link>,
            then the element starts in the
            <Term type="constant">EWaitingForDependencies</Term>
            state.
          </Item>
          <Item>
            If an element has an empty set of
            <Link target="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">dependencies</Link>,
            then the element starts in the
            <Term type="constant">EReady</Term>
            state.
          </Item>
        </ListUnordered>
      </FormalItem>
      <Paragraph>
        An element is considered to have <Term type="term">succeeded</Term> if it has reached the
        <Term type="constant">ESuccess</Term>
        state. An element is considered to have
        <Term type="term">failed</Term>
        if it has reached either of the <Term type="constant">EFailure</Term> or
        <Term type="constant">EFailureTimedOut</Term>
        states.
      </Paragraph>
      <Paragraph>
        If an element has a non-empty set of dependencies, then it remains in the
        <Term type="constant">EWaitingForDependencies</Term>
        state until either all of its dependencies have <Term type="term">succeeded</Term>, or at least one of its
        dependencies have
        <Term type="term">failed</Term>. If any of an element's dependencies have failed, then the element itself
        transitions immediately to the <Term type="constant">EFailure</Term> state. If all the element's dependencies
        have <Term type="term">succeeded</Term>, the element transitions to the
        <Term type="constant">EReady</Term>
        state.
      </Paragraph>
      <Paragraph>
        If an element is in the <Term type="constant">EReady</Term> state, then the element immediately transitions to a
        new state dependent on its type. If the element is a
        <Link target="f6a513dc-e704-4e62-a562-b2530d9f5e67">barrier</Link>, then the element immediately transitions to
        the <Term type="constant">ESuccess</Term> state. Otherwise, if the element is
        a <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>, the element immediately transitions to the
        <Term type="constant">EWaitingForAgent</Term>
        state.
      </Paragraph>
      <Paragraph>
        If an element is in the <Term type="constant">EWaitingForAgent</Term> state (which implies that it must be
        a <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>), it will wait for an
        <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agent</Link>
        to become available to execute the task. The maximum amount of time that the element will wait is determined by
        a configurable bound of <Term type="expression">t</Term> seconds; if no agent has become available after
        <Term type="expression">t</Term>
        has elapsed, the element transitions to the
        <Term type="constant">EFailureTimedOut</Term>
        state. Otherwise, if an agent becomes available and accepts the task for execution, the element transitions to
        the
        <Term type="constant">EExecuting</Term>
        state.
      </Paragraph>
      <Paragraph>
        Once an element is in the <Term type="constant">EExecuting</Term> state, the element will wait for the executing
        agent to report success or failure. The maximum amount of time that the element will wait is determined by a
        configurable bound of <Term type="expression">t</Term> seconds; if the agent has not reported success or failure
        after <Term type="expression">t</Term> has elapsed, the element transitions to the
        <Term type="constant">EFailureTimedOut</Term>
        state. If the agent reports success, the element transitions to the
        <Term type="constant">ESuccess</Term>
        state. If the agent reports failure, the element transitions to the
        <Term type="constant">EFailure</Term>
        state.
      </Paragraph>
    </Subsection>

    <Subsection title="Dependencies"
                id="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">
      <Paragraph>
        Dependencies...
      </Paragraph>
    </Subsection>
  </Subsection>

</Section>

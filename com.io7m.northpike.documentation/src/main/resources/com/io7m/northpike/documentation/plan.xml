<?xml version="1.0" encoding="UTF-8" ?>

<Section xmlns="urn:com.io7m.structural:8:0"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         id="352ba8b4-1d9d-443c-929a-21027c374207"
         title="Plan Language">

  <Subsection title="Overview">
    <Paragraph>
      The <Term type="term">plan</Term> language is a domain-specific language used to write
      <Link target="7b6d8296-cba1-448b-96e0-10e89b61bec0">plans</Link>.
    </Paragraph>
    <Paragraph>
      A <Term type="term">plan</Term> program consists of immutable
      <Link target="ee2248ae-b120-40ba-8ad7-96c82750d1b2">variables</Link>,
      <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">tasks</Link>, and
      <Link target="f6a513dc-e704-4e62-a562-b2530d9f5e67">barriers</Link>.
    </Paragraph>
  </Subsection>

  <Subsection title="Tasks"
              id="cbc2e395-4351-49fb-b90e-eb38d21e454c">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">task</Term> is an executable element that, when evaluated, causes a
        <Link target="af703b0a-3d34-486d-a69a-4a9f4838c82d">tool</Link>
        to be executed on an appropriate <Link target="935b5ed1-1fbb-4d8b-9930-c5a3e79c7afd">agent</Link>.
      </Paragraph>
    </Subsection>

    <Subsection title="Workspaces"
                id="6c1de05e-cd57-4e13-95f7-52bd6b4b9595">
      <Paragraph>
        When a <Term type="term">task</Term> is executed on an agent, a <Term type="term">workspace</Term> is created.
        It is within this <Term type="term">workspace</Term> that the
        <Link target="af703b0a-3d34-486d-a69a-4a9f4838c82d">tool</Link>
        associated with the task is executed. Workspaces may be destroyed after the task finishes execution,
        dependent upon the task's <Link target="912cce33-462d-4297-a67f-73b3173fa2b6">clean policy</Link>.
      </Paragraph>
    </Subsection>

    <Subsection title="Agent Constraints"
                id="8aadf34b-61e3-4780-b98f-6ff638ec2786">
      <Subsection title="Overview">
        <Paragraph>
          An <Term type="term">agent constraint</Term> is an expression used to reduce the set of
          <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agents</Link>
          that will be considered to be candidates for executing a given task. A constraint can consist of either
          an <Link target="1eecb80c-b738-4aef-a45a-8daa222117fa">agent label match expression</Link>, or a
          <Link target="39f13423-cc62-4f79-91b7-272fcf947d1c">same-as</Link>
          expression.
        </Paragraph>
      </Subsection>

      <Subsection title="Agent Label Match Expressions"
                  id="1eecb80c-b738-4aef-a45a-8daa222117fa">
        <Paragraph>
          An
          <Term type="term">agent label match expression</Term>
          is evaluated against the set of
          <Link target="3f9341dd-4d51-42e8-b0f5-370591e58afa">labels</Link>
          on a given agent. An <Term type="term">agent label match</Term> is a value of the given inductive type:
        </Paragraph>
        <FormalItem title="Agent Expression">
          <Verbatim>
            <xi:include href="agent-match-exp.txt"
                        parse="text"/>
          </Verbatim>
        </FormalItem>
        <Paragraph>
          Whether an expression matches a given agent <Term type="expression">a</Term> is given by the following
          inductive proposition:
        </Paragraph>
        <FormalItem title="Agent Expression Matches">
          <Verbatim>
            <xi:include href="agent-match-exp-prop.txt"
                        parse="text"/>
          </Verbatim>
        </FormalItem>
        <FormalItem title="Agent Expression Matches Explanation">
          <ListUnordered>
            <Item>
              An expression <Term type="expression">AMAnything</Term> matches any agent.
            </Item>
            <Item>
              An expression <Term type="expression">(AMIsSubsetOf xs)</Term> matches an agent
              <Term type="expression">a</Term>
              where each label
              <Term type="expression">x</Term>
              in
              <Term type="expression">xs</Term>
              is in
              <Term type="expression">(agentLabels a)</Term>.
            </Item>
            <Item>
              An expression <Term type="expression">(AMIsSupersetOf xs)</Term> matches an agent
              <Term type="expression">a</Term>
              where each label
              <Term type="expression">x</Term>
              in
              <Term type="expression">(agentLabels a)</Term>
              is in
              <Term type="expression">xs</Term>.
            </Item>
            <Item>
              An expression <Term type="expression">(AMIsOverlapping xs)</Term> matches an agent
              <Term type="expression">a</Term>
              where there exists at least one label
              <Term type="expression">x</Term>
              in
              <Term type="expression">xs</Term>
              that is in
              <Term type="expression">(agentLabels a)</Term>.
            </Item>
            <Item>
              An expression <Term type="expression">(AMIsEqualTo xs)</Term> matches an agent
              <Term type="expression">a</Term>
              where
              <Term type="expression">xs = (agentLabels a)</Term>.
            </Item>
            <Item>
              An expression <Term type="expression">(AMIsNotEqualTo xs)</Term> matches an agent
              <Term type="expression">a</Term>
              where
              <Term type="expression">xs â‰  (agentLabels a)</Term>.
            </Item>
          </ListUnordered>
        </FormalItem>
        <Paragraph>
          Formal descriptions of the semantics of these expressions are given in the
          associated <Link target="efaa5ba5-bc57-5284-bfdb-4c03bc73db04">proof script</Link>.
        </Paragraph>
      </Subsection>

      <Subsection title="Same-As Expression"
                  id="39f13423-cc62-4f79-91b7-272fcf947d1c">
        <Paragraph>
          A <Term type="term">same-as</Term> expression is a simple constraint that states that a given task
          <Term type="expression">T</Term>
          should execute on the same agent that executed task
          <Term type="expression">U</Term>. Setting a <Term type="term">same-as</Term> constraint on a task
          <Term type="expression">T</Term>
          to a task <Term type="expression">U</Term> automatically adds a
          <Link target="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">dependency</Link>
          on task
          <Term type="expression">U</Term>
          for task <Term type="expression">T</Term>.
        </Paragraph>
        <Paragraph>
          A <Term type="term">same-as</Term> constraint is useful when a task <Term type="expression">T</Term> needs to
          reuse objects that were produced by <Term type="expression">U</Term> when
          <Term type="expression">U</Term>
          executed on a given agent. A concrete example of this is when a task produces a set of
          <LinkExternal target="https://en.wikipedia.org/wiki/JAR_(file_format)">JAR</LinkExternal>
          files, and a later task wants to publish those JAR files to
          <LinkExternal target="https://central.sonatype.com/">Maven Central</LinkExternal>
          if and only if other tasks in the plan succeed. Note that, if the task <Term type="expression">T</Term> needs
          to guarantee that artifacts produced by <Term type="expression">U</Term> are still available by the time
          <Term type="expression">T</Term>
          executes, then
          <Term type="expression">U</Term>
          needs to be configured with a
          <Link target="912cce33-462d-4297-a67f-73b3173fa2b6">clean policy</Link>
          of at least
          <Term type="expression">CleanLater</Term>
          (otherwise, the agent is free to delete any artifacts produced by <Term type="expression">U</Term> as soon as
          it completes, which may be undesirable).
        </Paragraph>
      </Subsection>

      <Subsection title="Requires/Prefers">
        <Paragraph>
          A given task is associated with a mandatory <Term type="term">requirement</Term> constraint, and an optional
          <Term type="term">preference</Term>
          constraint. When a
          <Term type="term">plan</Term>
          program needs to find an agent for a given task, only the agents matching the
          <Term type="term">requirement</Term>
          constraint will be considered as candidates. When multiple agents match, any agent that happens to match the
          <Term type="term">preference</Term>
          constraint will be more likely to be offered the task first.
        </Paragraph>
      </Subsection>
    </Subsection>

    <Subsection title="Tool Execution"
                id="af703b0a-3d34-486d-a69a-4a9f4838c82d">
      <Paragraph>
        The <Term type="term">tool execution</Term> associated with the task is the
        <Link target="63fdd8ed-b53b-4d4e-b0b1-89ba8d52fbe8">tool execution</Link>
        that will be used to execute the referenced
        <Link target="fc06253c-8194-4a04-8d65-7bc2de2e7ea9">tool</Link>
        on the agent when the task runs.
      </Paragraph>
    </Subsection>

    <Subsection title="Clean Policy"
                id="912cce33-462d-4297-a67f-73b3173fa2b6">
      <Paragraph>
        The <Term type="term">clean policy</Term> for the task instructs the executing agent on whether it should
        preserve or destroy the
        <Link target="6c1de05e-cd57-4e13-95f7-52bd6b4b9595">workspace</Link>
        produced for the execution of the task. Agents are free to destroy anything produced by plans after the plan has
        completed, but some plans may require that the results of tasks are preserved at least until the end of the
        plan. The following <Term type="term">clean policies</Term> are available:
      </Paragraph>
      <FormalItem title="Clean Policies">
        <xi:include href="plan-clean-policy.xml"/>
      </FormalItem>
    </Subsection>
  </Subsection>

  <Subsection title="Barriers"
              id="f6a513dc-e704-4e62-a562-b2530d9f5e67">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">barrier</Term> is an executable element that is conceptually a kind of no-op
        <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>
        that does not require an agent, and that immediately
        <Link target="31edd30e-6e55-4284-a81a-9060e109f82c">succeeds</Link>
        as soon as its dependencies have succeeded.
      </Paragraph>
      <Paragraph>
        Barriers are essentially a convenient object used to control the execution of plan. A barrier
        <Term type="expression">b</Term>
        can be specified with a set of dependencies, and the execution of any plan elements that depend on
        <Term type="expression">b</Term>
        will not proceed until all the dependencies of <Term type="expression">b</Term> have completed successfully.
      </Paragraph>
    </Subsection>
  </Subsection>

  <Subsection title="Agents"
              id="43fa1060-d9b5-4e79-b139-015e1d6591f3">
    <Subsection title="Description">
      <Paragraph>
        A <Term type="term">agent</Term>, from the perspective of the <Term type="term">plan</Term> language, is an
        abstract object that can accept
        <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">tasks</Link>
        for execution. In reality, agents are the objects that reside in
        <Link target="935b5ed1-1fbb-4d8b-9930-c5a3e79c7afd">agent hosts</Link>.
      </Paragraph>
      <Paragraph>
        An <Term type="term">agent</Term> adheres to the following finite state machine, with all agents starting in the
        <Term type="expression">ASIdle</Term>
        state:
      </Paragraph>
      <FormalItem title="FSM">
        <Image source="agentState.png"
               width="602"
               height="482">Agent state
        </Image>
      </FormalItem>
      <Paragraph>
        When an agent is not executing a task, it is in the <Term type="expression">ASIdle</Term> state. The system may
        select the agent as a candidate for executing a given task. If the agent accepts the task for execution, it
        proceeds to the <Term type="expression">ASAccepted</Term> state and then, after an indefinite period
        <LinkFootnote target="29a01202-ba65-478c-9761-d5c335816991"/>, proceeds to the
        <Term type="expression">ASExecuting</Term>
        state. The task on the agent then either succeeds or fails, causing transitions to the
        <Term type="expression">ASSucceeded</Term>
        or
        <Term type="expression">ASFailed</Term>
        states, respectively. The agent then transitions back to the
        <Term type="expression">ASIdle</Term>
        state.
      </Paragraph>
    </Subsection>
  </Subsection>

  <Subsection title="Variables"
              id="ee2248ae-b120-40ba-8ad7-96c82750d1b2">
    <Subsection title="Overview">
      <Paragraph>
        A <Term type="term">variable</Term> is a named constant value that is made available to
        <Link target="af703b0a-3d34-486d-a69a-4a9f4838c82d">tool executions</Link>
        in a plan.
      </Paragraph>
    </Subsection>
    <Subsection title="Types">
      <Paragraph>
        A <Term type="term">variable</Term> has one of the following types:
      </Paragraph>
      <FormalItem title="Types">
        <Table type="genericTable">
          <Columns>
            <Column>Type</Column>
            <Column>Value Set</Column>
          </Columns>
          <Row>
            <Cell>
              <Term type="type">String</Term>
            </Cell>
            <Cell>
              Any string.
            </Cell>
          </Row>
          <Row>
            <Cell>
              <Term type="type">StringSet</Term>
            </Cell>
            <Cell>
              A set of strings.
            </Cell>
          </Row>
          <Row>
            <Cell>
              <Term type="type">Integer</Term>
            </Cell>
            <Cell>
              <Term type="expression">[-9223372036854775808, 9223372036854775808]</Term>
            </Cell>
          </Row>
          <Row>
            <Cell>
              <Term type="type">Boolean</Term>
            </Cell>
            <Cell>
              <Term type="expression">{true, false}</Term>
            </Cell>
          </Row>
        </Table>
      </FormalItem>
    </Subsection>
    <Subsection title="Standard Variables">
      <Paragraph>
        The following variables are always made accessible to plans:
      </Paragraph>
      <FormalItem title="Standard Variables">
        <xi:include href="plan-std-var.xml"/>
      </FormalItem>
    </Subsection>
  </Subsection>

  <Subsection title="Tool References"
              id="4f5e9536-bac1-4fd9-8549-5c2404be1d3d">
    <Paragraph>
      A <Term type="term">tool reference</Term> is a reference to a
      <Link target="fc06253c-8194-4a04-8d65-7bc2de2e7ea9">tool</Link>
      that will be required to run a particular
      <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>. A task definition containing one or more
      <Term type="term">tool references</Term>
      will cause those tools to be installed into the execution environment of the
      <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agent</Link>
      executing the task just prior to the task execution. Tool installation is required to be
      <Term type="term">idempotent</Term>, so it is safe to duplicate tool references across tasks.
    </Paragraph>
    <Paragraph>
      In many cases, tasks will not need to specify anything beyond their
      <Link target="af703b0a-3d34-486d-a69a-4a9f4838c82d">tool execution</Link>. However, more advanced use cases might
      require that multiple tools are installed before the main tool execution is run.
    </Paragraph>
  </Subsection>

  <Subsection title="Syntax"
              id="79a5df3a-a787-49b4-9839-29f5f4411547">
    <Subsection title="Overview">
      <Paragraph>
        Programs in the <Term type="term">plan</Term> language are specified in a strictly-defined XML format conforming
        to a published <Link target="c69b56e6-ba24-44a3-8be3-de12b24275c5">XSD schema</Link>.
      </Paragraph>
    </Subsection>

    <Subsection title="Example">
      <Paragraph>
        The following trivial example program defines two
        <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">tasks</Link>,
        <Term type="expression">com.io7m.task0</Term>
        and
        <Term type="expression">com.io7m.task1</Term>. The
        <Term type="expression">com.io7m.task1</Term>
        task is specified to depend on
        <Term type="expression">com.io7m.task0</Term>, and an
        <Link target="8aadf34b-61e3-4780-b98f-6ff638ec2786">agent constraint</Link>
        is used to ensure that
        <Term type="expression">com.io7m.task1</Term>
        executes on the same <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agent</Link> as the
        <Term type="expression">com.io7m.task0</Term>.
      </Paragraph>

      <FormalItem title="Example">
        <Verbatim>
          <xi:include href="example-plan.xml"
                      parse="text"/>
        </Verbatim>
      </FormalItem>
    </Subsection>
  </Subsection>

  <Subsection title="Semantics"
              id="fb2213d8-136e-4901-977b-ac7fcd5c929c">
    <Subsection title="Overview">
      <Paragraph>
        The <Term type="term">plan</Term> language is a concurrent, non-deterministic language specified as a series of
        <Link target="d312770c-c3c0-4092-85ec-8e2dbf4b082f">state transitions</Link>. Evaluation of a program in the
        <Term type="term">plan</Term>
        language effectively proceeds by non-deterministically choosing an element from the set of elements in the
        program and attempting to make that element transition to a new state. Each
        <Term type="term">state transition</Term>
        has an associated set of
        <Term type="term">preconditions</Term>
        that indicate whether an element can move to a new state according to that state transition; if the
        preconditions for that state transition evaluate to
        <Term type="expression">true</Term>, the element transitions to the new state.
      </Paragraph>
      <Paragraph>
        For the set of known state transitions,
        <Link target="823194b3-8ff0-46dd-adf1-8bc722535fcb">formal proofs</Link>
        exist that have verified the following properties of the language rules:
      </Paragraph>
      <FormalItem title="Verified Properties">
        <ListUnordered>
          <Item>
            The preconditions for each defined state transition are
            <Term type="term">decidable</Term>. That is, it is always possible to determine if a state transition is
            applicable to a given element. Accordingly, it is always possible to determine if an element exists to which
            any state transition applies.
          </Item>
          <Item>
            The state transitions, as defined, have the property of
            <Term type="term">strong progress</Term>. That is, if the program is not in a state
            considered <Link target="12444ab8-7abd-4bc4-a2f9-4288f2c657dd">completed</Link>, then there is always a
            state transition that will apply to allow the program to take another step of execution.
          </Item>
          <Item>
            The state transitions, as defined, will always preserve various invariants such as "
            <Link target="f6a513dc-e704-4e62-a562-b2530d9f5e67">barrier</Link>
            elements are never considered for execution on an agent", "an element with no dependencies can never be
            waiting for dependencies", and etc.
          </Item>
        </ListUnordered>
      </FormalItem>
      <Paragraph>
        It follows that programs in the <Term type="term">plan</Term> language will always terminate in a finite number
        of steps (due to configurable bounds on the times elements are allowed to remain in various states), although
        the proofs do not currently attempt to verify this.
      </Paragraph>
      <Paragraph>
        The actual <Term type="term">implementation</Term> of the plan evaluation logic in the server has
        <Term type="term">not</Term>
        been formally verified; the proofs only indicate that the design appears to be sound, not that the
        implementation is bug-free.
      </Paragraph>
      <Paragraph>
        The evaluation of a <Term type="term">plan</Term> language program should be considered to operate in the
        presence of a set of <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agents</Link>, with the state of each
        agent being subject to change at any time. Many state transitions are dependent on an appropriate agent being
        available to execute parts of the plan.
      </Paragraph>
    </Subsection>
    <Subsection title="States"
                id="d312770c-c3c0-4092-85ec-8e2dbf4b082f">
      <FormalItem title="States">
        <Image source="exec.png"
               width="640"
               height="482">States
        </Image>
      </FormalItem>
      <Paragraph>
        Each element in the plan has a defined initial state:
      </Paragraph>
      <FormalItem title="Initial States">
        <ListUnordered>
          <Item>
            If an element has a non-empty set of
            <Link target="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">dependencies</Link>, then the element starts in the
            <Term type="constant">EWaitingForDependencies</Term>
            state.
          </Item>
          <Item>
            If an element has an empty set of
            <Link target="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">dependencies</Link>, then the element starts in the
            <Term type="constant">EReady</Term>
            state.
          </Item>
        </ListUnordered>
      </FormalItem>
      <Paragraph id="31edd30e-6e55-4284-a81a-9060e109f82c">
        An element is considered to have <Term type="term">succeeded</Term> if it has reached the
        <Term type="constant">ESuccess</Term>
        state. An element is considered to have
        <Term type="term">failed</Term>
        if it has reached either of the <Term type="constant">EFailure</Term> or
        <Term type="constant">EFailureTimedOut</Term>
        states.
      </Paragraph>
      <Paragraph>
        If an element has a non-empty set of dependencies, then it remains in the
        <Term type="constant">EWaitingForDependencies</Term>
        state until either all of its dependencies have <Term type="term">succeeded</Term>, or at least one of its
        dependencies has
        <Term type="term">failed</Term>. If any of an element's dependencies have failed, then the element itself
        transitions immediately to the <Term type="constant">EFailure</Term> state. If all the element's dependencies
        have <Term type="term">succeeded</Term>, the element transitions to the
        <Term type="constant">EReady</Term>
        state.
      </Paragraph>
      <Paragraph>
        If an element is in the <Term type="constant">EReady</Term> state, then the element immediately transitions to a
        new state dependent on its type. If the element is a
        <Link target="f6a513dc-e704-4e62-a562-b2530d9f5e67">barrier</Link>, then the element immediately transitions to
        the <Term type="constant">ESuccess</Term> state. Otherwise, if the element is
        a <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>, the element immediately transitions to the
        <Term type="constant">EWaitingForAgent</Term>
        state.
      </Paragraph>
      <Paragraph>
        If an element is in the <Term type="constant">EWaitingForAgent</Term> state (which implies that it must be
        a <Link target="cbc2e395-4351-49fb-b90e-eb38d21e454c">task</Link>), it will wait for an
        <Link target="43fa1060-d9b5-4e79-b139-015e1d6591f3">agent</Link>
        to become available to execute the task. The maximum amount of time that the element will wait is determined by
        a configurable bound of <Term type="expression">t</Term> seconds; if no agent has become available after
        <Term type="expression">t</Term>
        has elapsed, the element transitions to the
        <Term type="constant">EFailureTimedOut</Term>
        state. Otherwise, if an agent becomes available and accepts the task for execution, the element transitions to
        the
        <Term type="constant">EExecuting</Term>
        state.
      </Paragraph>
      <Paragraph>
        Once an element is in the <Term type="constant">EExecuting</Term> state, the element will wait for the executing
        agent to report success or failure. The maximum amount of time that the element will wait is determined by a
        configurable bound of <Term type="expression">t</Term> seconds; if the agent has not reported success or failure
        after <Term type="expression">t</Term> has elapsed, the element transitions to the
        <Term type="constant">EFailureTimedOut</Term>
        state. If the agent reports success, the element transitions to the
        <Term type="constant">ESuccess</Term>
        state. If the agent reports failure, the element transitions to the
        <Term type="constant">EFailure</Term>
        state.
      </Paragraph>
    </Subsection>
    <Subsection title="Completion"
                id="12444ab8-7abd-4bc4-a2f9-4288f2c657dd">
      <Paragraph>
        A given program <Term type="expression">p</Term> has
        <Term type="term">completed</Term>
        if any of the following conditions hold:
      </Paragraph>
      <FormalItem title="Completion Conditions">
        <ListUnordered>
          <Item>
            For each element <Term type="expression">e</Term> in <Term type="expression">p</Term>, the state of
            <Term type="expression">e</Term>
            is
            <Term type="constant">ESuccess</Term>.
          </Item>
          <Item>
            There is an element <Term type="expression">e</Term> that exists in
            <Term type="expression">p</Term>
            such that the state of <Term type="expression">e</Term> is
            <Term type="constant">EFailure</Term>
            or <Term type="constant">EFailureTimedOut</Term>.
          </Item>
        </ListUnordered>
      </FormalItem>
      <Paragraph>
        A program in a <Term type="term">completed</Term> state no longer takes any steps of evaluation.
      </Paragraph>
    </Subsection>
    <Subsection title="Dependencies"
                id="9147dd3d-3f83-424b-aa3b-1f826f47a4f3">
      <Paragraph>
        The elements in a <Term type="term">plan</Term> program form a <Term type="term">directed acyclic graph</Term>.
        A given element <Term type="term">e</Term> has a possibly-empty set of
        <Term type="term">dependencies</Term>
        that must have <Link target="31edd30e-6e55-4284-a81a-9060e109f82c">succeeded</Link> before
        <Term type="term">e</Term>
        can be processed.
      </Paragraph>
      <Paragraph>
        Dependencies are the only means by which to control the order of execution of elements within a
        <Term type="term">plan</Term>
        program; in a program where none of the elements have dependencies, implementations are free to execute any
        number of elements concurrently and in any order.
      </Paragraph>
    </Subsection>
  </Subsection>

  <Footnote id="29a01202-ba65-478c-9761-d5c335816991">
    Typically, real implementations of agents will start executing tasks immediately. Agent implementations should avoid
    using long queues to store tasks; agents should favour rejecting tasks that cannot be started promptly over placing
    the tasks into queues. The reasoning behind this is that agents should assume that they are part of a large set of
    distributed agents, and that if they cannot execute a given task immediately, they can likely assume that another
    agent will be available in the set to execute the task if they cannot. In a system where agents immediately tried to
    monopolize all tasks, many other agents would be left sitting idle with no tasks to execute.
  </Footnote>

</Section>
